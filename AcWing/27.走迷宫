https://www.acwing.com/problem/content/846/

#include<iostream>
#include<cstring>
#include<queue>
using namespace std;

const int N=110;
typedef pair<int ,int> PII;
int g[N][N],f[N][N];
int n,m;

void bfs(int a,int b){
    queue<PII> q;
    q.push({a,b});
    
    while(!q.empty()){
        PII start = q.front();
        q.pop();
        
        int dx[4]={0,0,-1,1},dy[4]={-1,1,0,0};  //定义上下左右四个要走的方向
        for(int i=0;i<4;i++){  //往四个方向走
            int x=start.first+dx[i],y=start.second+dy[i];  //记录当前坐标的位置
            if(g[x][y]==0){  //如果当前这个坐标还没有走过
                g[x][y]=1;  //标记成1，表示这个坐标已经走过了
                f[x][y]=f[start.first][start.second]+1;  //计算此时离初始点的距离
                q.push({x,y});  //将这个点放入队列，用来计算走到与它相邻的点里初始位置的距离
                
            }
        
        }
    }
    
    cout<<f[n][m];  //最后输出终点里初始位置的距离，此时距离就是终点离初始位置的最短距离
}

int main(){
    cin>>n>>m;
    
    memset(g,1,sizeof(g));
    
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            cin>>g[i][j];
        }
    }
    
    bfs(1,1);
    
    return 0;
}
